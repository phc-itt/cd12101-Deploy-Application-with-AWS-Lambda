org: cuongph10
app: udacity-x
service: serverless-todo-app

plugins:
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin

frameworkVersion: '4.4.13'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    REGION: ${self:provider.region}
    TODOS_TABLE: Todos-${self:provider.stage}-Old
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    IMAGES_S3_BUCKET: todos-images-nth-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    LOGGER_NAME: nth-serverless-todo-app
    AUTH0_DOMAIN: dev-cuongph10.us.auth0.com
  tracing:
    lambda: true
    apiGateway: true
  logs:
    restApi: true
    websocket: true
    httpApi: true

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          authorizer: Auth
          path: todos
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/CreatedAtIndex
      - Effect: Allow
        Action:
          - xray:*
        Resource: '*'
      - Effect: Allow
        Action:
          - apigateway:*
        Resource: '*'
      - Effect: Allow
        Action:
          - 's3:GetObject'
        Resource:
          - arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
          - arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}

  # TODO: Configure CreateTodos function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(src/models/create-todo-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:*
        Resource: '*'
      - Effect: Allow
        Action:
          - apigateway:*
        Resource: '*'

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(src/models/update-todo-request.json)}
            parameters:
              paths:
                todoId: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:*
      - Effect: Allow
        Action:
          - apigateway:*
        Resource: '*'

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request:
            parameters:
              paths:
                todoId: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:*
      - Effect: Allow
        Action:
          - xray:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - apigateway:*
        Resource: '*'
      - Effect: Allow
        Action:
          - s3:*
        Resource:
          - arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
          - arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:*
      - Effect: Allow
        Action:
          - s3:*
        Resource:
          - arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
          - arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
      - Effect: Allow
        Action:
          - xray:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - apigateway:*
        Resource: '*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,DELETE'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S # Required for the primary key
          - AttributeName: todoId
            AttributeType: S # Required for the primary key
          - AttributeName: createdAt
            AttributeType: S # Used in the LSI, not in the main key
        KeySchema:
          - AttributeName: userId
            KeyType: HASH # Primary partition key
          - AttributeName: todoId
            KeyType: RANGE # Primary sort key
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId # Same HASH key as the main table
                KeyType: HASH
              - AttributeName: createdAt # Sort key for the index
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: NthPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - 's3:ListBucket'
              Resource:
                - 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
                - 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}'
            - Sid: AllowLambdaFunctionToPutObjects
              Effect: Allow
              Principal: '*'
              Action:
                - 's3:PutObject'
                - 's3:GetObject'
              Resource:
                - 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
                - 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}'
        Bucket: !Ref AttachmentsBucket
